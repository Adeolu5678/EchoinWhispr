name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Root-level linting and quality checks
  root-lint:
    name: Root Level Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.head_commit != null && (contains(github.event.head_commit.modified, '.eslintrc.js') || contains(github.event.head_commit.modified, '.prettierrc') || contains(github.event.head_commit.modified, 'tsconfig.json'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-root-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-root-

      - name: Install root dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type checking
        run: |
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit
          else
            echo "No tsconfig.json found, skipping TypeScript check"
          fi

      - name: Run ESLint
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            pnpm lint
          else
            echo "No ESLint configuration found, skipping linting"
          fi

      - name: Run Prettier check
        run: |
          if [ -f ".prettierrc" ] || [ -f "prettier.config.js" ]; then
            npx prettier --check .
          else
            echo "No Prettier configuration found, skipping format check"
          fi

  # Individual application workflows
  convex-ci:
    name: Convex Backend CI
    uses: ./.github/workflows/convex-ci.yml
    if: (github.event.head_commit != null && contains(github.event.head_commit.modified, 'Convex/')) || github.event_name == 'push'

  web-ci:
    name: Web Application CI
    uses: ./.github/workflows/web-ci.yml
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && (contains(github.event.head_commit.modified, 'Web/') || contains(github.event.pull_request.changed_files, 'Web/')))

  react-native-ci:
    name: React Native Application CI
    uses: ./.github/workflows/react-native-ci.yml
    if: (github.event.head_commit != null && contains(github.event.head_commit.modified, 'ReactNative/')) || github.event_name == 'push'

  # Dependency and security checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: Install root dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level=moderate

      - name: Check for vulnerable dependencies
        run: |
          if pnpm audit --audit-level=high; then
            echo "No high-severity vulnerabilities found"
          else
            echo "High-severity vulnerabilities detected"
            exit 1
          fi

  # Final status check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [root-lint, convex-ci, web-ci, react-native-ci, security-audit]
    if: always()

    steps:
      - name: Check all CI jobs status
        run: |
          if [ "${{ needs.root-lint.result }}" = "failure" ] || \
             [ "${{ needs.convex-ci.result }}" = "failure" ] || \
             [ "${{ needs.web-ci.result }}" = "failure" ] || \
             [ "${{ needs.react-native-ci.result }}" = "failure" ] || \
             [ "${{ needs.security-audit.result }}" = "failure" ]; then
            echo "Some CI jobs failed"
            exit 1
          else
            echo "All CI jobs passed successfully"
          fi

      - name: Create CI status summary
        run: |
          echo "## CI/CD Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Root Linting | ${{ needs.root-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Convex Backend | ${{ needs.convex-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Web Application | ${{ needs.web-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| React Native App | ${{ needs.react-native-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Pipeline completed at $(date)" >> $GITHUB_STEP_SUMMARY

  # Deployment coordination (only on main branch)
  deploy-coordination:
    name: Deployment Coordination
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: ci-status
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.ci-status.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deployment Summary
        run: |
          echo "## ðŸš€ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… All CI checks passed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Code quality verified" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Security audit completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **Web Application**: Deployed to Vercel" >> $GITHUB_STEP_SUMMARY
          echo "- **React Native**: Published to Expo" >> $GITHUB_STEP_SUMMARY
          echo "- **Convex Backend**: Deployed to Convex" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— **Live URLs:**" >> $GITHUB_STEP_SUMMARY
          echo "- Web: [Production URL](https://echoinwhispr.vercel.app)" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile: Available via Expo Go" >> $GITHUB_STEP_SUMMARY