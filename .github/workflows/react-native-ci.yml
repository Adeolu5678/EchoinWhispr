name: React Native Application CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ReactNative/**'
      - '.github/workflows/react-native-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ReactNative/**'
      - '.github/workflows/react-native-ci.yml'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  lint-and-test:
    name: Lint and Test React Native App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-rn-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-rn-

      - name: Install dependencies
        working-directory: ./ReactNative
        run: pnpm install --frozen-lockfile

      - name: Run linting and code quality checks
        uses: ./.github/workflows/lint-and-quality.yml
        with:
          working-directory: ./ReactNative
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run tests
        working-directory: ./ReactNative
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            pnpm test
          else
            echo "No test script found, skipping tests"
          fi

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-rn-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-rn-

      - name: Install dependencies
        working-directory: ./ReactNative
        run: pnpm install --frozen-lockfile

      - name: Setup Expo CLI
        run: pnpm add -g @expo/cli

      - name: Install Expo dependencies
        working-directory: ./ReactNative
        run: npx expo install --fix

      - name: Build Android APK
        working-directory: ./ReactNative
        run: |
          npx expo build:android --type apk --no-publish --no-wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_PUBLIC_CONVEX_URL: ${{ secrets.EXPO_PUBLIC_CONVEX_URL }}
          EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Upload Android build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: ./ReactNative/dist/*.apk
          retention-days: 7

  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-rn-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-rn-

      - name: Install dependencies
        working-directory: ./ReactNative
        run: pnpm install --frozen-lockfile

      - name: Setup Expo CLI
        run: pnpm add -g @expo/cli

      - name: Install Expo dependencies
        working-directory: ./ReactNative
        run: npx expo install --fix

      - name: Build iOS App
        working-directory: ./ReactNative
        run: |
          npx expo build:ios --type archive --no-publish --no-wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_PUBLIC_CONVEX_URL: ${{ secrets.EXPO_PUBLIC_CONVEX_URL }}
          EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Upload iOS build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-archive
          path: ./ReactNative/dist/*.ipa
          retention-days: 7

  deploy-staging:
    name: Deploy to Expo Staging
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/develop' || (github.ref == 'refs/heads/main' && github.event_name == 'pull_request')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: ./ReactNative
        run: pnpm install --frozen-lockfile

      - name: Setup Expo CLI
        run: pnpm add -g @expo/cli

      - name: Publish to Expo (Staging Channel)
        working-directory: ./ReactNative
        run: |
          npx expo publish --release-channel staging
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_PUBLIC_CONVEX_URL: ${{ secrets.EXPO_PUBLIC_CONVEX_URL }}
          EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY }}

  deploy-production:
    name: Deploy to Expo Production
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: ./ReactNative
        run: pnpm install --frozen-lockfile

      - name: Setup Expo CLI
        run: pnpm add -g @expo/cli

      - name: Publish to Expo (Production Channel)
        working-directory: ./ReactNative
        run: |
          npx expo publish --release-channel production
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_PUBLIC_CONVEX_URL: ${{ secrets.EXPO_PUBLIC_CONVEX_URL }}
          EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY }}